class QuickSort:

    @staticmethod
    def sort(array, start, end):
        QuickSort._sort(array, start, end)

    @staticmethod
    def _sort(array, start, end):
        if start >= end:
            return
        boundary = QuickSort._partition(array, start, end)
        QuickSort._sort(array, start, boundary - 1)
        QuickSort._sort(array, boundary + 1, end)

    @staticmethod
    def _partition(array, start, end):
        i = start
        boundary = start - 1
        pivot = end
        while i < end:
            if array[i] < array[pivot]:
                boundary += 1
                QuickSort.swap(array, i, boundary)
            i += 1
        boundary += 1
        QuickSort.swap(array, pivot, boundary)
        return boundary

    @staticmethod
    def swap(nums, index1, index2):
        tempVal = nums[index1]
        nums[index1] = nums[index2]
        nums[index2] = tempVal
